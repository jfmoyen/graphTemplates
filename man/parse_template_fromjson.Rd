% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/json_parser.R
\name{parse_template_fromjson}
\alias{parse_template_fromjson}
\title{Parse a template loaded from json, converting the options as required}
\usage{
parse_template_fromjson(
  json,
  path = NULL,
  meta = c("details", "reference", "url", "templateAuthor", "templateConversion",
    "templateHistory"),
  template_options = NULL,
  transform_options = NULL,
  style_options = c(colDefault = "black", ltyDefault = "solid", lwdDefault = 1),
  doFilter = T
)
}
\arguments{
\item{json}{Name of the template file (if the .json extension is missing, it will be added automatically)}

\item{path}{Path to json file. By default the package files.}

\item{meta}{the names of the fields from the json file that should be kept as meta}

\item{template_options}{Named vector. They contain the switches to activate, or
desactivate, controlling the display of some graph elements (see ?jsonDiagramFormat)}

\item{transform_options}{Additional parameters to pass to the data transformation function}

\item{style_options}{Options to control the styling of some elements of the template.
(see ?jsonDiagramFormat).}

\item{doFilter}{if the template contains a filter (eg SiO2 > 45), should we respect it?}
}
\value{
a graphTemplate object.
}
\description{
This function combines a "raw" list, loaded from json file, with user options.
It performs the required modifications, such as changing colours or
removing elements, and returns a properly formatted graphTemplate object.
}
\details{
Most of the heavy loading is done at etemplate element level. A template is
primarily a collection (list) of templateElement, stored in self$template.
Each will be further processed, based on its class (lines, text...)
}
