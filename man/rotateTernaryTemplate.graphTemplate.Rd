% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graphTemplate_class.R
\name{rotateTernaryTemplate}
\alias{rotateTernaryTemplate}
\alias{rotateTernaryTemplate.graphTemplate}
\alias{rotateTernaryTemplate.ternary}
\title{Add axes and other graphical elements to a ternary template}
\usage{
rotateTernaryTemplate(self, rotation, scale, padding, setup = F)

\method{rotateTernaryTemplate}{graphTemplate}(self, rotation, scale, padding, setup = F)

\method{rotateTernaryTemplate}{ternary}(
  self,
  rotation = 0,
  scale = 1,
  padding = c(0.03, 0.03, 0.03, 0.05),
  setup = F
)
}
\arguments{
\item{self}{a graphTemplate}

\item{rotation}{in degrees, angle to rotate the graph.}

\item{scale}{The scale of the triangle: normally from 0 to 1 but in some contexts
the triangle could be defined as 0-100 (\%). Probably deprecated.}

\item{padding}{Extra space to add on the sides, c(left,top,right,bottom)}

\item{setup}{If T, use during setup. Just rotate. If F, use when rotating an
existing plot. This will update self$ternaryRotation.}
}
\description{
Add axes and other graphical elements to a ternary template
}
\details{
This method allows to rotate a template by a certain angle (in degrees). It will
rotate the template elements itself; if using pointCoordinates method, the
points will also end up in the right place. This works in plotFigaro
and plotgg.
If the user wants to do things manually (in ggplot), the rotation for data has to be implemented manually;
points should be then plotted with something like
transformedData <- tpl$dataTransform(WR)
plottingCoords <- ternaryCoordinates(transformedData$a.data,
transformedData$b.data,
transformedData$c.data,
tpl$ternaryRotation,tpl$ternaryScale)

..geom_points(data=plottingCoords,aes(x.data,y.data))
}
